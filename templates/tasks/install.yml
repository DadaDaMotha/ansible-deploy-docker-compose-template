---
# Issues with docker python package >=7.0.0
# https://github.com/docker/docker-py/releases/tag/7.0.0
# https://github.com/docker/docker-py/issues/3194
- name: Ensure python docker package
  pip:
    name:
      - docker==6.1.3
      - docker-compose
    extra_args: --user
    executable: pip3
  become_user: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"

- name: ensure deployment user for \VAR{ cli_output['role_name'] }
  user:
    name: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"
    state: "{{ \VAR{ cli_output['defaults_prefix'] }state | default('present') }}"
    create_home: true
    uid: "{{ \VAR{ cli_output['defaults_prefix'] }user_id }}"
    shell: /bin/bash

- name: Ensure user is added to the docker group.
  user:
    name: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"
    groups: docker
    append: true

- name: Ensure repository paths are present
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"
  loop:
   - "{{ repository_src }}"
   - "{{ repository_src }}/scripts"

- name: ensure external network exists
  community.docker.docker_network:
    name: "{{ \VAR{ cli_output['defaults_prefix'] }ext_net }}"
    driver: bridge
    attachable: true
    state: present

- name: test docker-compose changed
  template:
    src: "docker-compose.yml"
    dest: "{{ repository_src }}/docker-compose.yml"
    owner: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"
    mode: "600"
  check_mode: true
  register: repo_copy_test

- name: Stop services since compose has changed
  community.docker.docker_compose:
    project_name: "{{ \VAR{ cli_output['defaults_prefix'] }project_name }}"
    project_src: "{{ repository_src }}"
    state: absent
    files:
\BLOCK{ for f in cli_output['compose_files'] }
      - \VAR{ f | basename }
\BLOCK{ endfor }
  become_user: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"
  when:
  - not \VAR{ cli_output['defaults_prefix'] }remove
  - repo_copy_test.changed
  ignore_errors: true

- name: Copy docker-compose.yml
  template:
    src: "docker-compose.yml"
    dest: "{{ repository_src }}/docker-compose.yml"
    owner: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"
    mode: "600"
  register: repo_copy

- name: Run pre-start commands
  command: "{{ item }}"
  loop: "{{ \VAR{ cli_output['defaults_prefix'] }pre_startup_commands }}"
  become_user: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"

- name: Ensure services are {{ \VAR{ cli_output['defaults_prefix'] }state }}
  community.docker.docker_compose:
    project_name: "{{ \VAR{ cli_output['defaults_prefix'] }project_name }}"
    project_src: "{{ repository_src }}"
    debug: true
    state: "{{ \VAR{ cli_output['defaults_prefix'] }state }}"
    build: false
    files:
\BLOCK{ for f in cli_output['compose_files'] }
      - \VAR{ f | basename }
\BLOCK{ endfor }
  become_user: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"
  when: not \VAR{ cli_output['defaults_prefix'] }remove

- name: Run post-shutdown commands
  command: "{{ item }}"
  loop: "{{ \VAR{ cli_output['defaults_prefix'] }post_shutdown_commands }}"
  become_user: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"

- name: Put auto-update script
  copy:
    content: |
      #!/usr/bin/env bash
      
      set - eu
      cd {{ repository_src }}
      docker compose pull
      docker compose up -d

    dest: "{{ repository_src }}/autoupdate.sh"
    owner: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"
    mode: "770"
    state: "{{ 'present' if \VAR{ cli_output['defaults_prefix'] }auto_update else 'absent' }}"

- name: Set auto-update cron to {{ cron_state }}
  cron:
    name: update all services for \VAR{ cli_output['role_name'] }
    job: "{{ repository_src }}/autoupdate.sh"
    hour: "{{ \VAR{ cli_output['defaults_prefix'] }auto_update_cron_hour }}"
    minute: "{{ \VAR{ cli_output['defaults_prefix'] }auto_update_cron_minute }}"
    weekday: "{{ \VAR{ cli_output['defaults_prefix'] }auto_update_cron_weekday }}"
    month: "{{ \VAR{ cli_output['defaults_prefix'] }auto_update_cron_month }}"
    user: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"
    state: "{{ cron_state }}"
  become_user: "{{ \VAR{ cli_output['defaults_prefix'] }user }}"
  vars:
    cron_state: "{{ 'present' if \VAR{ cli_output['defaults_prefix'] }auto_update else 'absent' }}"
