# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class Cgroup(Enum):
    host = "host"
    private = "private"


class CredentialSpec(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    config: str | None = None
    file: str | None = None
    registry: str | None = None


class Condition(Enum):
    service_started = "service_started"
    service_healthy = "service_healthy"
    service_completed_successfully = "service_completed_successfully"


class DependsOn(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    restart: bool | None = None
    required: bool | None = True
    condition: Condition


class Extends(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    service: str
    file: str | None = None


class Logging(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    driver: str | None = None
    options: Dict[constr(pattern=r"^.+$"), str | float | None] | None = None


class Ports(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str | None = None
    mode: str | None = None
    host_ip: str | None = None
    target: int | None = None
    published: str | int | None = None
    protocol: str | None = None
    app_protocol: str | None = None


class PullPolicy(Enum):
    always = "always"
    never = "never"
    if_not_present = "if_not_present"
    build = "build"
    missing = "missing"


class Selinux(Enum):
    z = "z"
    Z = "Z"


class Bind(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propagation: str | None = None
    create_host_path: bool | None = None
    selinux: Selinux | None = None


class Volume1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    nocopy: bool | None = None
    subpath: str | None = None


class Tmpfs(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    size: conint(ge=0) | str | None = None
    mode: float | None = None


class Volumes(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: str
    source: str | None = None
    target: str | None = None
    read_only: bool | None = None
    consistency: str | None = None
    bind: Bind | None = None
    volume: Volume1 | None = None
    tmpfs: Tmpfs | None = None


class Healthcheck(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    disable: bool | None = None
    interval: str | None = None
    retries: float | None = None
    test: str | List[str] | None = None
    timeout: str | None = None
    start_period: str | None = None
    start_interval: str | None = None


class Action(Enum):
    rebuild = "rebuild"
    sync = "sync"
    sync_restart = "sync+restart"


class WatchItem(BaseModel):
    ignore: List[str] | None = None
    path: str | None = None
    action: Action | None = None
    target: str | None = None


class Development(BaseModel):
    watch: List[WatchItem] | None = None


class Order(Enum):
    start_first = "start-first"
    stop_first = "stop-first"


class RollbackConfig(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    parallelism: int | None = None
    delay: str | None = None
    failure_action: str | None = None
    monitor: str | None = None
    max_failure_ratio: float | None = None
    order: Order | None = None


class UpdateConfig(RollbackConfig):
    pass


class Limits(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    cpus: float | str | None = None
    memory: str | None = None
    pids: int | None = None


class RestartPolicy(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    condition: str | None = None
    delay: str | None = None
    max_attempts: int | None = None
    window: str | None = None


class Preference(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    spread: str | None = None


class Placement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    constraints: List[str] | None = None
    preferences: List[Preference] | None = None
    max_replicas_per_node: int | None = None


class DiscreteResourceSpec(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    kind: str | None = None
    value: float | None = None


class GenericResource(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    discrete_resource_spec: DiscreteResourceSpec | None = None


class GenericResources(RootModel[List[GenericResource]]):
    root: List[GenericResource]


class ConfigItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    subnet: str | None = None
    ip_range: str | None = None
    gateway: str | None = None
    aux_addresses: Dict[constr(pattern=r"^.+$"), str] | None = None


class Ipam(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    driver: str | None = None
    config: List[ConfigItem] | None = None
    options: Dict[constr(pattern=r"^.+$"), str] | None = None


class External(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str | None = None


class External2(BaseModel):
    name: str | None = None


class Command(RootModel[str | List[str] | None]):
    root: str | List[str] | None


class EnvFile1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    path: str
    required: bool | None = True


class EnvFile(RootModel[str | List[str | EnvFile1]]):
    root: str | List[str | EnvFile1]


class ListOfStrings(RootModel[List[str]]):
    root: List[str]


class ListOrDict(
    RootModel[Dict[constr(pattern=r".+"), str | float | bool | None] | List[str]]
):
    root: Dict[constr(pattern=r".+"), str | float | bool | None] | List[str]


class BlkioLimit(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    path: str | None = None
    rate: int | str | None = None


class BlkioWeight(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    path: str | None = None
    weight: int | None = None


class ServiceConfigOrSecret1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    source: str | None = None
    target: str | None = None
    uid: str | None = None
    gid: str | None = None
    mode: float | None = None


class ServiceConfigOrSecret(RootModel[List[str | ServiceConfigOrSecret1]]):
    root: List[str | ServiceConfigOrSecret1]


class Ulimits1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    hard: int
    soft: int


class Ulimits(RootModel[Dict[constr(pattern=r"^[a-z]+$"), int | Ulimits1]]):
    root: Dict[constr(pattern=r"^[a-z]+$"), int | Ulimits1]


class Constraints(RootModel[Any]):
    root: Any


class Build(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    context: str | None = None
    dockerfile: str | None = None
    dockerfile_inline: str | None = None
    entitlements: List[str] | None = None
    args: ListOrDict | None = None
    ssh: ListOrDict | None = None
    labels: ListOrDict | None = None
    cache_from: List[str] | None = None
    cache_to: List[str] | None = None
    no_cache: bool | None = None
    additional_contexts: ListOrDict | None = None
    network: str | None = None
    pull: bool | None = None
    target: str | None = None
    shm_size: int | str | None = None
    extra_hosts: ListOrDict | None = None
    isolation: str | None = None
    privileged: bool | None = None
    secrets: ServiceConfigOrSecret | None = None
    tags: List[str] | None = None
    ulimits: Ulimits | None = None
    platforms: List[str] | None = None


class BlkioConfig(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    device_read_bps: List[BlkioLimit] | None = None
    device_read_iops: List[BlkioLimit] | None = None
    device_write_bps: List[BlkioLimit] | None = None
    device_write_iops: List[BlkioLimit] | None = None
    weight: int | None = None
    weight_device: List[BlkioWeight] | None = None


class Networks(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    aliases: ListOfStrings | None = None
    ipv4_address: str | None = None
    ipv6_address: str | None = None
    link_local_ips: ListOfStrings | None = None
    mac_address: str | None = None
    priority: float | None = None


class Device(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    capabilities: ListOfStrings | None = None
    count: str | int | None = None
    device_ids: ListOfStrings | None = None
    driver: str | None = None
    options: ListOrDict | None = None


class Devices(RootModel[List[Device]]):
    root: List[Device]


class Network(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str | None = None
    driver: str | None = None
    driver_opts: Dict[constr(pattern=r"^.+$"), str | float] | None = None
    ipam: Ipam | None = None
    external: External | None = None
    internal: bool | None = None
    enable_ipv6: bool | None = None
    attachable: bool | None = None
    labels: ListOrDict | None = None


class Volume(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str | None = None
    driver: str | None = None
    driver_opts: Dict[constr(pattern=r"^.+$"), str | float] | None = None
    external: External | None = None
    labels: ListOrDict | None = None


class Secret(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str | None = None
    environment: str | None = None
    file: str | None = None
    external: External2 | None = None
    labels: ListOrDict | None = None
    driver: str | None = None
    driver_opts: Dict[constr(pattern=r"^.+$"), str | float] | None = None
    template_driver: str | None = None


class Config(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str | None = None
    content: str | None = None
    environment: str | None = None
    file: str | None = None
    external: External2 | None = None
    labels: ListOrDict | None = None
    template_driver: str | None = None


class StringOrList(RootModel[str | ListOfStrings]):
    root: str | ListOfStrings


class Reservations(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    cpus: float | str | None = None
    memory: str | None = None
    generic_resources: GenericResources | None = None
    devices: Devices | None = None


class Resources(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    limits: Limits | None = None
    reservations: Reservations | None = None


class Deployment(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    mode: str | None = None
    endpoint_mode: str | None = None
    replicas: int | None = None
    labels: ListOrDict | None = None
    rollback_config: RollbackConfig | None = None
    update_config: UpdateConfig | None = None
    resources: Resources | None = None
    restart_policy: RestartPolicy | None = None
    placement: Placement | None = None


class Include1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    path: StringOrList | None = None
    env_file: StringOrList | None = None
    project_directory: str | None = None


class Include(RootModel[str | Include1]):
    root: str | Include1


class Service(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    develop: Development | None = None
    deploy: Deployment | None = None
    annotations: ListOrDict | None = None
    attach: bool | None = None
    build: str | Build | None = None
    blkio_config: BlkioConfig | None = None
    cap_add: List[str] | None = None
    cap_drop: List[str] | None = None
    cgroup: Cgroup | None = None
    cgroup_parent: str | None = None
    command: Command | None = None
    configs: ServiceConfigOrSecret | None = None
    container_name: str | None = None
    cpu_count: conint(ge=0) | None = None
    cpu_percent: conint(ge=0, le=100) | None = None
    cpu_shares: float | str | None = None
    cpu_quota: float | str | None = None
    cpu_period: float | str | None = None
    cpu_rt_period: float | str | None = None
    cpu_rt_runtime: float | str | None = None
    cpus: float | str | None = None
    cpuset: str | None = None
    credential_spec: CredentialSpec | None = None
    depends_on: (
        ListOfStrings | Dict[constr(pattern=r"^[a-zA-Z0-9._-]+$"), DependsOn] | None
    ) = None
    device_cgroup_rules: ListOfStrings | None = None
    devices: List[str] | None = None
    dns: StringOrList | None = None
    dns_opt: List[str] | None = None
    dns_search: StringOrList | None = None
    domainname: str | None = None
    entrypoint: Command | None = None
    env_file: EnvFile | None = None
    environment: ListOrDict | None = None
    expose: List[str | float] | None = None
    extends: str | Extends | None = None
    external_links: List[str] | None = None
    extra_hosts: ListOrDict | None = None
    group_add: List[str | float] | None = None
    healthcheck: Healthcheck | None = None
    hostname: str | None = None
    image: str | None = None
    init: bool | None = None
    ipc: str | None = None
    isolation: str | None = None
    labels: ListOrDict | None = None
    links: List[str] | None = None
    logging: Logging | None = None
    mac_address: str | None = None
    mem_limit: float | str | None = None
    mem_reservation: str | int | None = None
    mem_swappiness: int | None = None
    memswap_limit: float | str | None = None
    network_mode: str | None = None
    networks: (
        ListOfStrings
        | Dict[constr(pattern=r"^[a-zA-Z0-9._-]+$"), Networks | None]
        | None
    ) = None
    oom_kill_disable: bool | None = None
    oom_score_adj: conint(ge=-1000, le=1000) | None = None
    pid: str | None = None
    pids_limit: float | str | None = None
    platform: str | None = None
    ports: List[float | str | Ports] | None = None
    privileged: bool | None = None
    profiles: ListOfStrings | None = None
    pull_policy: PullPolicy | None = None
    read_only: bool | None = None
    restart: str | None = None
    runtime: str | None = None
    scale: int | None = None
    security_opt: List[str] | None = None
    shm_size: float | str | None = None
    secrets: ServiceConfigOrSecret | None = None
    sysctls: ListOrDict | None = None
    stdin_open: bool | None = None
    stop_grace_period: str | None = None
    stop_signal: str | None = None
    storage_opt: Dict[str, Any] | None = None
    tmpfs: StringOrList | None = None
    tty: bool | None = None
    ulimits: Ulimits | None = None
    user: str | None = None
    uts: str | None = None
    userns_mode: str | None = None
    volumes: List[str | Volumes] | None = None
    volumes_from: List[str] | None = None
    working_dir: str | None = None


class ComposeSpecification(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    version: str | None = Field(
        None, description="declared for backward compatibility, ignored."
    )
    name: constr(pattern=r"^[a-z0-9][a-z0-9_-]*$") | None = Field(
        None,
        description="define the Compose project name, until user defines one explicitly.",
    )
    include: List[Include] | None = Field(
        None, description="compose sub-projects to be included."
    )
    services: Dict[constr(pattern=r"^[a-zA-Z0-9._-]+$"), Service] | None = None
    networks: Dict[constr(pattern=r"^[a-zA-Z0-9._-]+$"), Network | None] | None = None
    volumes: Dict[constr(pattern=r"^[a-zA-Z0-9._-]+$"), Volume | None] | None = None
    secrets: Dict[constr(pattern=r"^[a-zA-Z0-9._-]+$"), Secret] | None = None
    configs: Dict[constr(pattern=r"^[a-zA-Z0-9._-]+$"), Config] | None = None
